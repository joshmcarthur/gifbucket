{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UPLOAD_URL","URL","process","bucketUrl","concat","publicObjectUrl","key","Index","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","items","setActive","bind","assertThisInitialized","_this2","fetch","then","r","text","xml","window","DOMParser","parseFromString","doc","Array","from","querySelectorAll","elements","map","content","children","reduce","acc","child","tagName","toLowerCase","textContent","contents","setState","evt","preventDefault","_this3","_this$state","react_default","a","createElement","className","item","active","onClick","e","src","alt","navigator","share","url","React","Component","ShareTarget","_this4","params","URLSearchParams","location","search","requestUpload","get","_this5","searchParams","append","method","headers","X-Api-Key","history","push","alert","disabled","react_router_dom","to","AppRouter","react_router","path","exact","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","href","origin","addEventListener","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d4b94bfc.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nconst UPLOAD_URL = new URL(process.env.REACT_APP_API_ENDPOINT + \"/gifs/create\");\nconst BUCKET_NAME = process.env.REACT_APP_S3_BUCKET_NAME;\nconst AWS_REGION = process.env.REACT_APP_S3_REGION;\n\nconst bucketUrl = () => `https://${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com`;\nconst publicObjectUrl = (key) => `${bucketUrl()}/${key}`;\n\n\nclass Index extends React.Component {\n  state = { isLoading: true, items: [] }\n  constructor(props) {\n    super(props);\n    this.setActive = this.setActive.bind(this);\n  }\n  componentDidMount() {\n    fetch(bucketUrl())\n      .then(r => r.text())\n      .then(xml => (new window.DOMParser()).parseFromString(xml, \"text/xml\"))\n      .then(doc => Array.from(doc.querySelectorAll(\"Contents\")))\n      .then(elements => (\n        elements.map(content => (\n          Array.from(content.children).reduce(\n            (acc, child) => {\n              acc[child.tagName.toLowerCase()] = child.textContent;\n              return acc;\n            }, {}\n          )\n        ))\n      ))\n      .then(contents => this.setState({ items: contents, isLoading: false }));\n  }\n  setActive(evt) {\n    evt.preventDefault();\n\n  }\n  render() {\n    const { isLoading, items } = this.state;\n    if (isLoading) return <p>Loading...</p>;\n    return (\n      <ul className=\"ItemList\">\n        {items.map(item => (\n          <li\n            className={`Item ${this.state.active === item.key ? 'active' : ''}`}\n            key={item.key}\n            onClick={e => { e.preventDefault(); this.setState({ active: item.key }) }}\n          >\n            <img src={publicObjectUrl(item.key)} alt={item.key} />\n            <div className=\"Share\">\n              <button\n                onClick={(evt) => { if (!navigator.share) return; evt.preventDefault(); navigator.share({ url: publicObjectUrl(item.key) }) }}\n              >Share</button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nclass ShareTarget extends React.Component {\n  constructor(props) {\n    super(props);\n    const params = new URLSearchParams(props.location.search); // From react-router\n    this.requestUpload = this.requestUpload.bind(this);\n    this.state = { url: params.get(\"url\") || params.get(\"text\") };\n  }\n\n  requestUpload(evt) {\n    evt.preventDefault();\n    this.setState({ isLoading: true });\n    UPLOAD_URL.searchParams.append(\"url\", this.state.url);\n    fetch(UPLOAD_URL, { method: \"POST\", headers: { \"X-Api-Key\": \"test\" } })\n      .then(() => this.props.history.push(\"/\"), alert);\n  }\n\n  render() {\n    return <div className=\"ShareTarget\">\n      <img src={this.state.url} alt={this.state.url} />\n      <button className=\"UploadButton\" onClick={this.requestUpload} disabled={this.state.isLoading}>\n        {this.state.isLoading ? \"Bucketing...\" : \"Add to Bucket\"}</button>\n      <Link className=\"CancelLink\" to=\"/\">Cancel</Link>\n    </div>\n  }\n}\nfunction AppRouter() {\n  return (\n    <Router>\n      <header className=\"Header\">\n        <h1 className=\"Header--Title\">GIFBucket</h1>\n      </header>\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/share-target/\" component={ShareTarget} />\n    </Router>\n  );\n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}